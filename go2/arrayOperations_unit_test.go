// Code generated by go2go; DO NOT EDIT.


//line arrayOperations_unit_test.go2:1
package go2

//line arrayOperations_unit_test.go2:1
import (
//line arrayOperations_unit_test.go2:1
 "fmt"
//line arrayOperations_unit_test.go2:1
 "testing"
//line arrayOperations_unit_test.go2:1
)

//line arrayOperations_unit_test.go2:28
func TestDistinct(t *testing.T) {
	for i, tt := range []instantiate୦୦testDistinct୦int{instantiate୦୦testDistinct୦int{
//line arrayOperations_unit_test.go2:31
  input:  []int{1, 2, 3, 3, 4},
							output: []int{1, 2, 3, 4},
	},
	} {
		t.Run(fmt.Sprintf("%d", i), func(t *testing.T) {
			actual := instantiate୦୦Distinct୦int(tt.input)

			if !instantiate୦୦isEqual୦int(actual, tt.output) {
				t.Errorf("expected: %v %T, received: %v %T", tt.output, tt.output, actual, actual)
			}
		})
	}
}

//line arrayOperations_unit_test.go2:43
type instantiate୦୦testDistinct୦int struct {
//line arrayOperations_unit_test.go2:24
 input  instantiate୦୦testDistinctInput୦int
						output instantiate୦୦testDistinctOutput୦int
}

//line arrayOperations.go2:6
func instantiate୦୦Distinct୦int(arr []int,) []int {

//line arrayOperations.go2:9
 m := make(map[int]struct{})
	for idx := range arr {
		m[arr[idx]] = struct{}{}
	}

//line arrayOperations.go2:15
 res := make([]int, len(m))
	i := 0
	for k := range m {
		res[i] = k
		i++
	}

	return res
}
//line arrayOperations_unit_test.go2:8
func instantiate୦୦isEqual୦int(a, b []int,) bool {
	if len(a) != len(b) {
		return false
	}
	for idx := range a {
		if a[idx] != b[idx] {
			return false
		}
	}

	return true
}

//line arrayOperations_unit_test.go2:19
type instantiate୦୦testDistinctInput୦int []int
//line arrayOperations_unit_test.go2:29
type instantiate୦୦testDistinctOutput୦int []int

//line arrayOperations_unit_test.go2:29
var _ = fmt.Errorf
//line arrayOperations_unit_test.go2:29
var _ = testing.AllocsPerRun
